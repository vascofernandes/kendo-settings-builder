{"version":3,"sources":["webpack:///kendo-settings-builder.min.js","webpack:///webpack/bootstrap 9e971d9187a3fac67af3","webpack:///./src/index.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","System","register","exports_1","DataSource_1","ModelDescriptorFieldType","ModelFieldType","ModelDescriptorBuilder","GridScrollableSettings","GridScrollSettingsBuilder","KGrid","GridColumnBase","GridBoundColumn","GridColumnBuilderBase","GridBoundColumnBuilder","GridColumnFactory","GridBuilder","CrudOperationBuilder","AjaxDataSourceBuilder","DataSourceBuilder","ModelColumnDescriptor","ModelTypeExtractor","CustomerType","modelColumn","opts","__extends","this","d","b","__","constructor","hasOwnProperty","prototype","Object","create","setters","DataSource_1_1","execute","_a","String","Number","ModelDescriptorBuilder.constructor","ModelDescriptorBuilder.AddField","ModelDescriptorBuilder.FromObject","ModelDescriptorBuilder.FromArray","ModelDescriptorBuilder.FromTyped","ModelDescriptorBuilder.SetField","GridScrollSettingsBuilder.constructor","GridScrollSettingsBuilder.Enabled","GridScrollSettingsBuilder.Height","GridScrollSettingsBuilder.Virtual","KGrid.constructor","_super","GridBoundColumn.constructor","GridColumnBuilderBase.constructor","GridColumnBuilderBase.Title","GridColumnBuilderBase.Width","GridColumnBuilderBase.Visible","GridColumnBuilderBase.Locked","GridColumnBuilderBase.Hidden","GridBoundColumnBuilder.constructor","GridBoundColumnBuilder.Format","GridBoundColumnBuilder.Sortable","GridBoundColumnBuilder.Groupable","GridBoundColumnBuilder.Filterable","GridBoundColumnBuilder.Encoded","GridBoundColumnBuilder.Template","GridColumnFactory.constructor","GridColumnFactory.Bound","GridBuilder.constructor","GridBuilder.Columns","GridBuilder.Height","GridBuilder.DataSource","GridBuilder.Scrollable","CrudOperationBuilder.constructor","CrudOperationBuilder.Action","CrudOperationBuilder.Data","AjaxDataSourceBuilder.constructor","AjaxDataSourceBuilder.Read","DataSourceBuilder.constructor","DataSourceBuilder.Ajax","DataSourceBuilder.Filter","DataSourceBuilder.Schema","ModelColumnDescriptor.constructor","ModelTypeExtractor.constructor","ModelTypeExtractor.getType","CustomerType.constructor","Columns","columns","Bound","model","Id","Title","Name","DataSource","ds","Schema","AddField","name","Ajax","Read","op","Action","Height","Scrollable","sc","Enabled","Virtual"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,GAGtBQ,OAAOC,UAAU,cAAe,SAASC,GACrC,GAKIC,GACAC,EE3CLC,EAAcC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAsZdC,EAKAC,EFtXKC,EAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAI3B,KAAK4B,GAAOA,EAAEG,eAAe/B,KAAI2B,EAAE3B,GAAK4B,EAAE5B,GAEnD2B,GAAEK,UAAkB,OAANJ,EAAaK,OAAOC,OAAON,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,IAInF,QACIM,SACI,SAAUC,GACNhC,EAAegC,IAEvBC,QAAS,YEtDlB,SAAKhC,GACDA,uBACAA,wBAFCA,WAKgBiC,KACjBA,EAACjC,EAAyBkC,QAAS,SACnCD,EAACjC,EAAyBmC,QAAS,SAFnClC,EFyDagC,EElDjB/B,EAAA,WAGIA,WAAoBA,GAAAkC,uBAFZA,eAAYA,EA+BxBlC,MA1BIA,+BAASA,EAAmBA,GAExBmC,MADAA,MAAKA,SAASA,EAAWA,GAClBA,MAGXnC,gCAAWA,GAAXoC,UACIA,QAAOA,KAAKA,GAAOA,QAAQA,SAACA,GAAeA,SAAKA,SAASA,EAAOA,EAAMA,OAG1EpC,+BAAUA,GAAVqC,UACIA,GAAMA,QAAQA,SAACA,GAAsCA,SAAKA,SAASA,EAAWA,MAAOA,EAAWA,SAGpGrC,+BAAUA,GAAVsC,WACQA,EAAmBA,GAAUA,EAEjCA,QAAOA,KAAKA,GAAQA,QAAQA,SAACA,GACzBA,GAAIA,GAAQA,EAAOA,GACfA,EAAOA,EAASA,MAAMA,EAC1BA,GAAKA,SAASA,EAAOA,MAIrBtC,qBAARA,SAAiBA,EAAeA,GAC5BuC,KAAKA,gBAAgBA,OAAOA,IAAWA,KAAMA,KAAKA,UAAUA,KAEpEvC,KAQAC,EAAA,WAAAA,cAIAA,YAEAC,EAAA,WACIA,WAAoBA,GAAAsC,gBAyBxBtC,MAtBIA,8BAAQA,GAGJuC,MAFAA,MAAKA,SAASA,QAAUA,EAEjBA,MAGXvC,4BAAOA,GAQHwC,MANsBA,gBAAXA,KACPA,EAASA,EAAOA,WAAaA,MAGjCA,KAAKA,SAASA,OAASA,EAAOA,WAEvBA,MAGXxC,6BAAQA,GAEJyC,MADAA,MAAKA,SAASA,QAAUA,EACjBA,MAGfzC,KAEAC,EAAA,WAAAA,aACIyC,gBAAaA,GAAIA,OAAMA,KAAKA,eAC5BA,YAASA,IACTA,gBAAaA,MAIbA,eAAWA,EACXA,gBAAaA,GAAIA,GASjBA,gBAIJzC,YAEAC,EAAA,WAAAA,cA0BAA,YAEAC,EAAA,SAAAwC,GAGIxC,WAAoBA,EAAWA,EAAqBA,GAEhDyC,aAFgBA,YAIhBA,KAAKA,MAAQA,EAAWA,GAEhCzC,MATsCA,QAStCA,GATsCD,GAWtCE,EAAA,WACIA,WAAmBA,GAAAyC,cAsCvBzC,MAnCIA,4BAAMA,GAGF0C,MAFAA,MAAKA,OAAOA,MAAQA,EAEbA,MAGX1C,2BAAMA,GAQF2C,MANqBA,gBAAVA,KACPA,EAAQA,EAAMA,WAAaA,MAG/BA,KAAKA,OAAOA,MAAQA,EAAMA,WAEnBA,MAGX3C,6BAAQA,GAGJ4C,MAFAA,MAAKA,OAAOA,QAAUA,EAEfA,MAGX5C,4BAAOA,GAIH6C,MAFAA,MAAKA,OAAOA,OAASA,EAAQA,GAAQA,EAE9BA,MAGX7C,4BAAOA,GAGH8C,MAFAA,MAAKA,OAAOA,OAASA,EAEdA,MAEf9C,KAEAC,EAAA,SAAAsC,GACItC,WAAYA,GACR8C,YAAMA,GAiDd9C,MAnD6CA,QAKzCA,4BAAOA,GAGH+C,MAFAA,MAAKA,OAAOA,OAASA,EAEdA,MAGX/C,8BAASA,GAGLgD,MAFAA,MAAKA,OAAOA,SAAWA,EAEhBA,MAGXhD,+BAAUA,GAGNiD,MAFAA,MAAKA,OAAOA,UAAYA,EAEjBA,MAGXjD,gCAAWA,GAGPkD,MAFAA,MAAKA,OAAOA,WAAaA,EAElBA,MAQXlD,6BAAQA,GAGJmD,MAFAA,MAAKA,OAAOA,QAAUA,EAEfA,MAGXnD,8BAASA,GAGLoD,MAFAA,MAAKA,OAAOA,SAAWA,EAEhBA,MAQfpD,GAnD6CD,GAqD7CE,EAAA,WAGIA,WAAoBA,EAAmBA,GAAnBoD,YAAmBA,iBACnCA,KAAKA,iBAAmBA,EAWhCpD,MARIA,4BAAMA,GAEFqD,GAAIA,GAASA,GAAIA,GAAwBA,KAAKA,KAAMA,KAAKA,UAAWA,EAIpEA,OAFAA,MAAKA,iBAAiBA,QAAQA,IAAIA,GAE3BA,GAAIA,GAA+BA,IAElDrD,KAGAC,EAAA,WAGIA,aACIqD,KAAKA,UAAYA,GAAIA,GAsC7BrD,MAnCIA,8BAAQA,EAAWA,GAEfsD,GAAIA,GAAUA,GAAIA,GAA0BA,EAAMA,KAAKA,UAIvDA,OAFAA,GAAaA,GAENA,MAGXtD,4BAAOA,GAEHuD,MADAA,MAAKA,UAAUA,OAASA,EACjBA,MAGXvD,gCAAWA,GAEPwD,GAAIA,GAAKA,GAAIA,aAMbA,OAJAA,GAAaA,GAAIA,GAAkBA,IAEnCA,KAAKA,UAAUA,WAAaA,GAAIA,OAAMA,KAAKA,WAAWA,GAE/CA,MAGXxD,gCAAWA,GAQPyD,MANAA,MAAKA,UAAUA,WAAWA,SAAUA,EAEhCA,GAAwCA,kBAAjBA,IACvBA,EAAaA,GAAIA,GAA0BA,KAAKA,UAAUA,aAGvDA,MAEfzD,KAEAC,EAAA,WACIA,WAAoBA,GAAAyD,iBAYxBzD,MATIA,6BAAOA,GAEH0D,MADAA,MAAKA,UAAUA,IAAMA,EACdA,MAGX1D,0BAAKA,GAED2D,MADAA,MAAKA,UAAUA,KAAOA,EACfA,MAEf3D,KAEAC,EAAA,WACIA,WAAoBA,GAAA2D,kBAMxB3D,MAHIA,2BAAKA,GACD4D,EAAaA,GAAIA,GAAqBA,KAAKA,WAAWA,UAAUA,QAExE5D,KAEAC,EAAA,WAEIA,WAAoBA,GAAA4D,kBA4BxB5D,MAzBIA,6BACI6D,MAAOA,IAAIA,GAAsBA,KAAKA,aAG1C7D,4BAAOA,GAEH8D,MAAOA,OAGX9D,4BAAOA,GAEH+D,GAAIA,GAAUA,GAAIA,GAAuBA,KAAKA,WAAWA,OAAOA,MAYhEA,OAV4BA,kBAAjBA,GAC0BA,EAAcA,GAChBA,gBAAjBA,GACdA,EAAQA,WAAWA,GACYA,eAAjBA,GACdA,EAAQA,UAAmCA,GAE3CA,EAAQA,UAAkBA,GAGvBA,MAEf/D,KAGAC,EAAA,WACIA,WACWA,EACAA,EACAA,GAFA+D,aACAA,aACAA,YAGf/D,YAMAC,EAAA,WAEIA,WAAoBA,GAAA+D,aAOxB/D,MAHIA,8BAAQA,GACJgE,MAAOA,MAAKA,MAAMA,MAAMA,IAEhChE,KAOAC,EAAA,WAAAA,aACIgE,YAAQA,KACJA,EAACA,EAAaA,IAAKA,EAAyBA,OAC5CA,EAACA,EAAaA,MAAOA,EAAyBA,OFrE7BhD,EAEJ,IAAIA,GEwEzBhB,MAFWA,MAAKA,KACLA,OAAOA,OAClBA,KAaIC,GACA,GAAIH,GAAsB,KAAM,aAAcf,EAAyBmC,QACvE,GAAIpB,GAAsB,OAAQ,eAAgBf,EAAyBkC,SAG3Ef,GAAO,GAAIR,IACVuE,QAAQjE,EAAc,SAACkE,GACpBA,EAAQC,MAAM,SAACC,GAAyB,MAAAA,GAAMC,KAAIC,MAAM,eACxDJ,EAAQC,MAAM,SAACC,GAAyB,MAAAA,GAAMG,OAAMD,MAAM,mBAE7DE,WAAW,SAACC,GAA4BA,EACpCC,OAAO,SAACN,GAAoCA,EACxCO,SAAS,KAAM5F,EAAyBmC,QACxCyD,SAAS,OAAQ5F,EAAyBkC,UAE9CyD,QACGrG,GAAIU,EAAyBmC,OAC7B0D,KAAM7F,EAAyBkC,SAElCyD,OAAOzE,GACPyE,OAAO1E,GACP6E,OACAC,KAAK,SAACC,GAA6B,MAAAA,GAAGC,OAAO,aAEjDC,OAAO,KACPC,WAAW,SAACC,GAAoCA,EAC5CC,SAAQ,GACRH,OAAO,KACPI,SAAQ,MF/DZ,IAAIrE","file":"kendo-settings-builder.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t/// <reference path=\"../typings/tsd.d.ts\" />\r\n\tSystem.register(['DataSource'], function(exports_1) {\r\n\t    var __extends = (this && this.__extends) || function (d, b) {\r\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t    var DataSource_1;\r\n\t    var ModelDescriptorFieldType, ModelFieldType, ModelDescriptorBuilder, GridScrollableSettings, GridScrollSettingsBuilder, KGrid, GridColumnBase, GridBoundColumn, GridColumnBuilderBase, GridBoundColumnBuilder, GridColumnFactory, GridBuilder, CrudOperationBuilder, AjaxDataSourceBuilder, DataSourceBuilder, ModelColumnDescriptor, ModelTypeExtractor, CustomerType, modelColumn, opts;\r\n\t    return {\r\n\t        setters:[\r\n\t            function (DataSource_1_1) {\r\n\t                DataSource_1 = DataSource_1_1;\r\n\t            }],\r\n\t        execute: function() {\r\n\t            (function (ModelDescriptorFieldType) {\r\n\t                ModelDescriptorFieldType[ModelDescriptorFieldType[\"String\"] = 0] = \"String\";\r\n\t                ModelDescriptorFieldType[ModelDescriptorFieldType[\"Number\"] = 1] = \"Number\";\r\n\t            })(ModelDescriptorFieldType || (ModelDescriptorFieldType = {}));\r\n\t            ModelFieldType = (_a = {},\r\n\t                _a[ModelDescriptorFieldType.String] = 'string',\r\n\t                _a[ModelDescriptorFieldType.Number] = 'number',\r\n\t                _a\r\n\t            );\r\n\t            ModelDescriptorBuilder = (function () {\r\n\t                function ModelDescriptorBuilder(modelDescriptor) {\r\n\t                    this.modelDescriptor = modelDescriptor;\r\n\t                    this.fieldType = ModelFieldType;\r\n\t                }\r\n\t                ModelDescriptorBuilder.prototype.AddField = function (fieldName, type) {\r\n\t                    this.SetField(fieldName, type);\r\n\t                    return this;\r\n\t                };\r\n\t                ModelDescriptorBuilder.prototype.FromObject = function (model) {\r\n\t                    var _this = this;\r\n\t                    Object.keys(model).forEach(function (field) { return _this.SetField(field, model[field]); });\r\n\t                };\r\n\t                ModelDescriptorBuilder.prototype.FromArray = function (model) {\r\n\t                    var _this = this;\r\n\t                    model.forEach(function (descriptor) { return _this.SetField(descriptor.Field, descriptor.Type); });\r\n\t                };\r\n\t                ModelDescriptorBuilder.prototype.FromTyped = function (entity) {\r\n\t                    var _this = this;\r\n\t                    var instance = new entity(); // Need an instance to access the type information\r\n\t                    Object.keys(entity).forEach(function (key) {\r\n\t                        var field = entity[key];\r\n\t                        var type = instance.Types[field];\r\n\t                        _this.SetField(field, type);\r\n\t                    });\r\n\t                };\r\n\t                ModelDescriptorBuilder.prototype.SetField = function (field, type) {\r\n\t                    this.modelDescriptor.fields[field] = { type: this.fieldType[type] };\r\n\t                };\r\n\t                return ModelDescriptorBuilder;\r\n\t            })();\r\n\t            GridScrollableSettings = (function () {\r\n\t                function GridScrollableSettings() {\r\n\t                }\r\n\t                return GridScrollableSettings;\r\n\t            })();\r\n\t            GridScrollSettingsBuilder = (function () {\r\n\t                function GridScrollSettingsBuilder(settings) {\r\n\t                    this.settings = settings;\r\n\t                }\r\n\t                GridScrollSettingsBuilder.prototype.Enabled = function (value) {\r\n\t                    this.settings.enabled = value;\r\n\t                    return this;\r\n\t                };\r\n\t                GridScrollSettingsBuilder.prototype.Height = function (height) {\r\n\t                    if (typeof height === 'number') {\r\n\t                        height = height.toString() + 'px';\r\n\t                    }\r\n\t                    this.settings.height = height.toString(); // make TS happy\r\n\t                    return this;\r\n\t                };\r\n\t                GridScrollSettingsBuilder.prototype.Virtual = function (value) {\r\n\t                    this.settings.virtual = value;\r\n\t                    return this;\r\n\t                };\r\n\t                return GridScrollSettingsBuilder;\r\n\t            })();\r\n\t            KGrid = (function () {\r\n\t                function KGrid() {\r\n\t                    this.dataSource = new kendo.data.DataSource({});\r\n\t                    this.height = 200;\r\n\t                    this.selectable = 'row';\r\n\t                    this.sortable = true;\r\n\t                    this.scrollable = new GridScrollableSettings;\r\n\t                    this.columns = [];\r\n\t                }\r\n\t                return KGrid;\r\n\t            })();\r\n\t            GridColumnBase = (function () {\r\n\t                function GridColumnBase() {\r\n\t                }\r\n\t                return GridColumnBase;\r\n\t            })();\r\n\t            GridBoundColumn = (function (_super) {\r\n\t                __extends(GridBoundColumn, _super);\r\n\t                function GridBoundColumn(type, grid, expression) {\r\n\t                    _super.call(this);\r\n\t                    this.type = type;\r\n\t                    this.field = expression(type);\r\n\t                }\r\n\t                return GridBoundColumn;\r\n\t            })(GridColumnBase);\r\n\t            GridColumnBuilderBase = (function () {\r\n\t                function GridColumnBuilderBase(column) {\r\n\t                    this.column = column;\r\n\t                }\r\n\t                GridColumnBuilderBase.prototype.Title = function (text) {\r\n\t                    this.column.title = text;\r\n\t                    return this;\r\n\t                };\r\n\t                GridColumnBuilderBase.prototype.Width = function (width) {\r\n\t                    if (typeof width === 'number') {\r\n\t                        width = width.toString() + 'px';\r\n\t                    }\r\n\t                    this.column.width = width.toString();\r\n\t                    return this;\r\n\t                };\r\n\t                GridColumnBuilderBase.prototype.Visible = function (value) {\r\n\t                    this.column.visible = value;\r\n\t                    return this;\r\n\t                };\r\n\t                GridColumnBuilderBase.prototype.Locked = function (value) {\r\n\t                    this.column.locked = value ? value : true;\r\n\t                    return this;\r\n\t                };\r\n\t                GridColumnBuilderBase.prototype.Hidden = function (value) {\r\n\t                    this.column.hidden = value;\r\n\t                    return this;\r\n\t                };\r\n\t                return GridColumnBuilderBase;\r\n\t            })();\r\n\t            GridBoundColumnBuilder = (function (_super) {\r\n\t                __extends(GridBoundColumnBuilder, _super);\r\n\t                function GridBoundColumnBuilder(column) {\r\n\t                    _super.call(this, column);\r\n\t                }\r\n\t                GridBoundColumnBuilder.prototype.Format = function (value) {\r\n\t                    this.column.format = value;\r\n\t                    return this;\r\n\t                };\r\n\t                GridBoundColumnBuilder.prototype.Sortable = function (value) {\r\n\t                    this.column.sortable = value;\r\n\t                    return this;\r\n\t                };\r\n\t                GridBoundColumnBuilder.prototype.Groupable = function (value) {\r\n\t                    this.column.groupable = value;\r\n\t                    return this;\r\n\t                };\r\n\t                GridBoundColumnBuilder.prototype.Filterable = function (value) {\r\n\t                    this.column.filterable = value;\r\n\t                    return this;\r\n\t                };\r\n\t                //Filterable(configurator: Action<any>) { // GridBoundColumnFilterableBuilder\r\n\t                //    configurator(new GridBoundColumnFilterableBuilder(this.column.filterableSettings));\r\n\t                //    return this;\r\n\t                //}  \r\n\t                GridBoundColumnBuilder.prototype.Encoded = function (value) {\r\n\t                    this.column.encoded = value;\r\n\t                    return this;\r\n\t                };\r\n\t                GridBoundColumnBuilder.prototype.Template = function (templateAction) {\r\n\t                    this.column.template = templateAction;\r\n\t                    return this;\r\n\t                };\r\n\t                return GridBoundColumnBuilder;\r\n\t            })(GridColumnBuilderBase);\r\n\t            GridColumnFactory = (function () {\r\n\t                function GridColumnFactory(type, container) {\r\n\t                    this.type = type;\r\n\t                    this.container = container;\r\n\t                    this.columnsContainer = container;\r\n\t                }\r\n\t                GridColumnFactory.prototype.Bound = function (expression) {\r\n\t                    var column = new GridBoundColumn(this.type, this.container, expression);\r\n\t                    this.columnsContainer.columns.Add(column);\r\n\t                    return new GridBoundColumnBuilder(column);\r\n\t                };\r\n\t                return GridColumnFactory;\r\n\t            })();\r\n\t            GridBuilder = (function () {\r\n\t                function GridBuilder() {\r\n\t                    this.component = new KGrid();\r\n\t                }\r\n\t                GridBuilder.prototype.Columns = function (type, configurator) {\r\n\t                    var factory = new GridColumnFactory(type, this.component);\r\n\t                    configurator(factory);\r\n\t                    return this;\r\n\t                };\r\n\t                GridBuilder.prototype.Height = function (height) {\r\n\t                    this.component.height = height;\r\n\t                    return this;\r\n\t                };\r\n\t                GridBuilder.prototype.DataSource = function (configurator) {\r\n\t                    var ds = new DataSource_1.DataSource;\r\n\t                    configurator(new DataSourceBuilder(ds));\r\n\t                    this.component.dataSource = new kendo.data.DataSource(ds);\r\n\t                    return this;\r\n\t                };\r\n\t                GridBuilder.prototype.Scrollable = function (configurator) {\r\n\t                    this.component.scrollable.enabled = true;\r\n\t                    if (configurator && typeof configurator === 'function') {\r\n\t                        configurator(new GridScrollSettingsBuilder(this.component.scrollable));\r\n\t                    }\r\n\t                    return this;\r\n\t                };\r\n\t                return GridBuilder;\r\n\t            })();\r\n\t            CrudOperationBuilder = (function () {\r\n\t                function CrudOperationBuilder(operation) {\r\n\t                    this.operation = operation;\r\n\t                }\r\n\t                CrudOperationBuilder.prototype.Action = function (url) {\r\n\t                    this.operation.url = url;\r\n\t                    return this;\r\n\t                };\r\n\t                CrudOperationBuilder.prototype.Data = function (data) {\r\n\t                    this.operation.data = data;\r\n\t                    return this;\r\n\t                };\r\n\t                return CrudOperationBuilder;\r\n\t            })();\r\n\t            AjaxDataSourceBuilder = (function () {\r\n\t                function AjaxDataSourceBuilder(dataSource) {\r\n\t                    this.dataSource = dataSource;\r\n\t                }\r\n\t                AjaxDataSourceBuilder.prototype.Read = function (configurator) {\r\n\t                    configurator(new CrudOperationBuilder(this.dataSource.transport.read));\r\n\t                };\r\n\t                return AjaxDataSourceBuilder;\r\n\t            })();\r\n\t            DataSourceBuilder = (function () {\r\n\t                function DataSourceBuilder(dataSource) {\r\n\t                    this.dataSource = dataSource;\r\n\t                }\r\n\t                DataSourceBuilder.prototype.Ajax = function () {\r\n\t                    return new AjaxDataSourceBuilder(this.dataSource);\r\n\t                };\r\n\t                DataSourceBuilder.prototype.Filter = function (fn) {\r\n\t                    return this;\r\n\t                };\r\n\t                DataSourceBuilder.prototype.Schema = function (configurator) {\r\n\t                    var builder = new ModelDescriptorBuilder(this.dataSource.schema.model);\r\n\t                    if (typeof configurator === 'function') {\r\n\t                        configurator(builder);\r\n\t                    }\r\n\t                    else if (typeof configurator === 'object') {\r\n\t                        builder.FromObject(configurator);\r\n\t                    }\r\n\t                    else if (typeof configurator === 'array') {\r\n\t                        builder.FromArray(configurator);\r\n\t                    }\r\n\t                    else {\r\n\t                        builder.FromTyped(configurator);\r\n\t                    }\r\n\t                    return this;\r\n\t                };\r\n\t                return DataSourceBuilder;\r\n\t            })();\r\n\t            ModelColumnDescriptor = (function () {\r\n\t                function ModelColumnDescriptor(Field, Title, Type) {\r\n\t                    this.Field = Field;\r\n\t                    this.Title = Title;\r\n\t                    this.Type = Type;\r\n\t                }\r\n\t                return ModelColumnDescriptor;\r\n\t            })();\r\n\t            ModelTypeExtractor = (function () {\r\n\t                function ModelTypeExtractor(model) {\r\n\t                    this.model = model;\r\n\t                }\r\n\t                ModelTypeExtractor.prototype.getType = function (property) {\r\n\t                    return this.model.Types[property];\r\n\t                };\r\n\t                return ModelTypeExtractor;\r\n\t            })();\r\n\t            CustomerType = (function () {\r\n\t                function CustomerType() {\r\n\t                    this.Types = (_a = {},\r\n\t                        _a[CustomerType.Id] = ModelDescriptorFieldType.Number,\r\n\t                        _a[CustomerType.Name] = ModelDescriptorFieldType.String,\r\n\t                        _a\r\n\t                    );\r\n\t                    var _a;\r\n\t                }\r\n\t                CustomerType.Id = 'id';\r\n\t                CustomerType.Name = 'name';\r\n\t                return CustomerType;\r\n\t            })();\r\n\t            /*\r\n\t            var customerModelTypesExtractor = new ModelTypeExtractor(new CustomerType);\r\n\t            \r\n\t            var idType = customerModelTypesExtractor.getType(CustomerType.Id)\r\n\t            \r\n\t            var columns = [{\r\n\t                field: CustomerType.Id,\r\n\t                title: 'Customer Id'\r\n\t            }];\r\n\t            */\r\n\t            modelColumn = [\r\n\t                new ModelColumnDescriptor('id', 'Cusomer Id', ModelDescriptorFieldType.Number),\r\n\t                new ModelColumnDescriptor('name', 'Cusomer Name', ModelDescriptorFieldType.String),\r\n\t            ];\r\n\t            opts = new GridBuilder()\r\n\t                .Columns(CustomerType, function (columns) {\r\n\t                columns.Bound(function (model) { return model.Id; }).Title('Customer Id');\r\n\t                columns.Bound(function (model) { return model.Name; }).Title('Customer Name');\r\n\t            })\r\n\t                .DataSource(function (ds) {\r\n\t                ds\r\n\t                    .Schema(function (model) {\r\n\t                    model\r\n\t                        .AddField('id', ModelDescriptorFieldType.Number)\r\n\t                        .AddField('name', ModelDescriptorFieldType.String);\r\n\t                })\r\n\t                    .Schema({\r\n\t                    id: ModelDescriptorFieldType.Number,\r\n\t                    name: ModelDescriptorFieldType.String\r\n\t                })\r\n\t                    .Schema(modelColumn)\r\n\t                    .Schema(CustomerType)\r\n\t                    .Ajax()\r\n\t                    .Read(function (op) { return op.Action('myurl'); });\r\n\t            })\r\n\t                .Height(400)\r\n\t                .Scrollable(function (sc) {\r\n\t                sc\r\n\t                    .Enabled(true)\r\n\t                    .Height(200)\r\n\t                    .Virtual(true);\r\n\t            });\r\n\t        }\r\n\t    }\r\n\t    var _a;\r\n\t});\r\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** kendo-settings-builder.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9e971d9187a3fac67af3\n **/","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nimport { ModelDescriptor } from 'ModelDescriptor';\r\nimport { Func, Action } from 'Interfaces';\r\nimport { DataSource } from 'DataSource';\r\n\r\nenum ModelDescriptorFieldType {\r\n    String,\r\n    Number\r\n}\r\n\r\nvar ModelFieldType = {\r\n    [ModelDescriptorFieldType.String]: 'string',\r\n    [ModelDescriptorFieldType.Number]: 'number'\r\n};\r\n\r\n\r\n\r\nclass ModelDescriptorBuilder {\r\n    private fieldType = ModelFieldType;\r\n\r\n    constructor(private modelDescriptor: ModelDescriptor) {\r\n    }\r\n\r\n    AddField(fieldName: string, type: ModelDescriptorFieldType) {\r\n        this.SetField(fieldName, type);\r\n        return this;\r\n    }\r\n\r\n    FromObject(model: Object) {\r\n        Object.keys(model).forEach((field: any) => this.SetField(field, model[field]));\r\n    }\r\n\r\n    FromArray(model: ModelColumnDescriptor[]) {\r\n        model.forEach((descriptor: ModelColumnDescriptor) => this.SetField(descriptor.Field, descriptor.Type));\r\n    }\r\n\r\n    FromTyped(entity: ITyped) {\r\n        let instance: ITyped = new (<any>entity)(); // Need an instance to access the type information\r\n\r\n        Object.keys(entity).forEach((key: string) => {\r\n            let field = entity[key];\r\n            let type = instance.Types[field];\r\n            this.SetField(field, type);\r\n        });\r\n    }\r\n\r\n    private SetField(field: string, type: ModelDescriptorFieldType) {\r\n        this.modelDescriptor.fields[field] = { type: this.fieldType[type] };\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GridScrollableSettings {\r\n    enabled: boolean;\r\n    height: string;\r\n    virtual: boolean;\r\n}\r\n\r\nclass GridScrollSettingsBuilder {\r\n    constructor(private settings: GridScrollableSettings) {\r\n    }\r\n\r\n    Enabled(value: boolean) {\r\n        this.settings.enabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    Height(height: number | string) {\r\n\r\n        if (typeof height === 'number') {\r\n            height = height.toString() + 'px';\r\n        }\r\n\r\n        this.settings.height = height.toString(); // make TS happy\r\n\r\n        return this;\r\n    }\r\n\r\n    Virtual(value: boolean) {\r\n        this.settings.virtual = value;\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nclass KGrid<TModel> {\r\n    dataSource = new kendo.data.DataSource({});\r\n    height = 200;\r\n    selectable = 'row';\r\n    rowTemplate;\r\n    retailTemplate;\r\n    pageable;\r\n    sortable = true;\r\n    scrollable = new GridScrollableSettings;\r\n    navigatable;\r\n    filterable;\r\n    columnMenu;\r\n    editable;\r\n    grouping;\r\n    resizable;\r\n    reorderable;\r\n    dataBound;\r\n    columns: GridColumnBase[] = [];\r\n    toolbar;\r\n    pdf;\r\n    excel;\r\n}\r\n\r\nclass GridColumnBase {\r\n    field: string;\r\n    title: string;\r\n    width: string;\r\n    format: string;\r\n    groupable;\r\n    sortable;\r\n    filterable;\r\n    aggregates;\r\n    attributes;\r\n    columns;\r\n    command: string | any[];\r\n    editor;\r\n    template;\r\n    footerTemplate: string;\r\n    groupHeaderTemplate: string;\r\n    groupFooterTemplate: string;\r\n    hidden: boolean;\r\n    includeInMenu: string;\r\n    locked: boolean;\r\n    lockable: boolean;\r\n    encoded: boolean;\r\n    headerHtmlAttributes: {};\r\n    footerHtmlAttributes: {};\r\n    visible: boolean;\r\n    htmlAttributes: {};\r\n}\r\n\r\nclass GridBoundColumn<TModel> extends GridColumnBase {\r\n    public configObject;\r\n\r\n    constructor(private type: any, grid: KGrid<TModel>, expression: Func<TModel, string>) {\r\n\r\n        super();\r\n\r\n        this.field = expression(type);\r\n    }\r\n}\r\n\r\nclass GridColumnBuilderBase<TModel> {\r\n    constructor(public column: GridBoundColumn<TModel>) {\r\n    }\r\n\r\n    Title(text: string) {\r\n        this.column.title = text;\r\n\r\n        return this;\r\n    }\r\n\r\n    Width(width: number | string) {\r\n\r\n        if (typeof width === 'number') {\r\n            width = width.toString() + 'px';\r\n        }\r\n\r\n        this.column.width = width.toString();\r\n\r\n        return this;\r\n    }\r\n\r\n    Visible(value: boolean) {\r\n        this.column.visible = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    Locked(value?: boolean) {\r\n\r\n        this.column.locked = value ? value : true;\r\n\r\n        return this;\r\n    }\r\n\r\n    Hidden(value: boolean) {\r\n        this.column.hidden = value;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nclass GridBoundColumnBuilder<TModel> extends GridColumnBuilderBase<TModel> {\r\n    constructor(column: GridBoundColumn<TModel>) {\r\n        super(column);\r\n    }\r\n\r\n    Format(value: string) {\r\n        this.column.format = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    Sortable(value: boolean) {\r\n        this.column.sortable = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    Groupable(value: boolean) {\r\n        this.column.groupable = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    Filterable(value: boolean) {\r\n        this.column.filterable = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    //Filterable(configurator: Action<any>) { // GridBoundColumnFilterableBuilder\r\n    //    configurator(new GridBoundColumnFilterableBuilder(this.column.filterableSettings));\r\n    //    return this;\r\n    //}  \r\n\r\n    Encoded(value: boolean) {\r\n        this.column.encoded = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    Template(templateAction: Action<TModel>) {\r\n        this.column.template = templateAction;\r\n\r\n        return this;\r\n    }\r\n\r\n    //Template(inlineTemplate: Func<TModel, Object>) {\r\n    //    this.column.inlineTemplate = inlineTemplate;\r\n    //    return this;\r\n    //}\r\n\r\n}\r\n\r\nclass GridColumnFactory<TModel> {\r\n    private columnsContainer;\r\n\r\n    constructor(private type: any, private container: KGrid<TModel>) {\r\n        this.columnsContainer = container;\r\n    }\r\n\r\n    Bound(expression: Func<TModel, string>) {\r\n\r\n        let column = new GridBoundColumn<TModel>(this.type, this.container, expression);\r\n\r\n        this.columnsContainer.columns.Add(column);\r\n\r\n        return new GridBoundColumnBuilder<TModel>(column);\r\n    }\r\n}\r\n\r\n\r\nclass GridBuilder<TModel> {\r\n    private component;\r\n\r\n    constructor() {\r\n        this.component = new KGrid<TModel>();\r\n    }\r\n\r\n    Columns(type: any, configurator: Action<GridColumnFactory<TModel>>) {\r\n\r\n        var factory = new GridColumnFactory<TModel>(type, this.component);\r\n\r\n        configurator(factory);\r\n\r\n        return this;\r\n    }\r\n\r\n    Height(height: number) {\r\n        this.component.height = height;\r\n        return this;\r\n    }\r\n\r\n    DataSource(configurator: Action<DataSourceBuilder>) {\r\n\r\n        var ds = new DataSource;\r\n\r\n        configurator(new DataSourceBuilder(ds));\r\n\r\n        this.component.dataSource = new kendo.data.DataSource(ds);\r\n\r\n        return this;\r\n    }\r\n\r\n    Scrollable(configurator?: Action<GridScrollSettingsBuilder>) {\r\n\r\n        this.component.scrollable.enabled = true;\r\n\r\n        if (configurator && typeof configurator === 'function') {\r\n            configurator(new GridScrollSettingsBuilder(this.component.scrollable));\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nclass CrudOperationBuilder {\r\n    constructor(private operation: any) {\r\n    }\r\n\r\n    Action(url: any) {\r\n        this.operation.url = url;\r\n        return this;\r\n    }\r\n\r\n    Data(data: any) {\r\n        this.operation.data = data;\r\n        return this;\r\n    }\r\n}\r\n\r\nclass AjaxDataSourceBuilder {\r\n    constructor(private dataSource: kendo.data.DataSourceOptions) {\r\n    }\r\n\r\n    Read(configurator: Action<CrudOperationBuilder>) {\r\n        configurator(new CrudOperationBuilder(this.dataSource.transport.read));\r\n    }\r\n}\r\n\r\nclass DataSourceBuilder {\r\n\r\n    constructor(private dataSource: kendo.data.DataSourceOptions) {\r\n    }\r\n\r\n    Ajax() {\r\n        return new AjaxDataSourceBuilder(this.dataSource);\r\n    }\r\n\r\n    Filter(fn: any) {\r\n\r\n        return this;\r\n    }\r\n\r\n    Schema(configurator: Action<ModelDescriptorBuilder> | Object | ModelColumnDescriptor[] | ITyped) {\r\n\r\n        let builder = new ModelDescriptorBuilder(this.dataSource.schema.model);\r\n\r\n        if (typeof configurator === 'function') {\r\n            (<Action<ModelDescriptorBuilder>>configurator)(builder);\r\n        } else if (typeof configurator === 'object') {\r\n            builder.FromObject(configurator);\r\n        } else if (typeof configurator === 'array') {\r\n            builder.FromArray(<ModelColumnDescriptor[]>configurator);\r\n        } else {\r\n            builder.FromTyped(<ITyped>configurator);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\nclass ModelColumnDescriptor {\r\n    constructor(\r\n        public Field: string,\r\n        public Title: String,\r\n        public Type: ModelDescriptorFieldType\r\n    ) {\r\n    }\r\n}\r\n\r\ninterface ITyped {\r\n    Types: {};\r\n}\r\n\r\nclass ModelTypeExtractor {\r\n\r\n    constructor(private model: ITyped) {\r\n\r\n    }\r\n\r\n    getType(property: string) {\r\n        return this.model.Types[property];\r\n    }\r\n}\r\n\r\ninterface ICustomerType {\r\n    Id: string;\r\n    Name: string;\r\n}\r\n\r\nclass CustomerType implements ITyped {\r\n    Types = {\r\n        [CustomerType.Id]: ModelDescriptorFieldType.Number,\r\n        [CustomerType.Name]: ModelDescriptorFieldType.String,\r\n    };\r\n\r\n    static Id = 'id';\r\n    static Name = 'name';\r\n}\r\n\r\n/*\r\nvar customerModelTypesExtractor = new ModelTypeExtractor(new CustomerType);\r\n\r\nvar idType = customerModelTypesExtractor.getType(CustomerType.Id)\r\n\r\nvar columns = [{\r\n    field: CustomerType.Id,\r\n    title: 'Customer Id'\r\n}];\r\n*/\r\n\r\nvar modelColumn = [\r\n    new ModelColumnDescriptor('id', 'Cusomer Id', ModelDescriptorFieldType.Number),\r\n    new ModelColumnDescriptor('name', 'Cusomer Name', ModelDescriptorFieldType.String),\r\n];\r\n\r\nvar opts = new GridBuilder<ICustomerType>()\r\n    .Columns(CustomerType, (columns: GridColumnFactory<ICustomerType>) => {\r\n        columns.Bound((model: ICustomerType) => model.Id).Title('Customer Id');\r\n        columns.Bound((model: ICustomerType) => model.Name).Title('Customer Name');\r\n    })\r\n    .DataSource((ds: DataSourceBuilder) => { ds\r\n        .Schema((model: ModelDescriptorBuilder) => { model\r\n            .AddField('id', ModelDescriptorFieldType.Number)\r\n            .AddField('name', ModelDescriptorFieldType.String);\r\n        })\r\n        .Schema({\r\n            id: ModelDescriptorFieldType.Number,\r\n            name: ModelDescriptorFieldType.String\r\n        })\r\n        .Schema(modelColumn)\r\n        .Schema(CustomerType)\r\n        .Ajax()\r\n        .Read((op: CrudOperationBuilder) => op.Action('myurl'));\r\n    })\r\n    .Height(400)\r\n    .Scrollable((sc: GridScrollSettingsBuilder) => { sc\r\n        .Enabled(true)\r\n        .Height(200)\r\n        .Virtual(true);\r\n    });\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.ts\n **/"],"sourceRoot":""}